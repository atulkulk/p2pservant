/***************************************************************************************************/
/*				Project : CSCI551 Final Part 2 Project 				   */
/*				Filename: README (Servant Implementation)			   */
/*				Name: Atul Kulkarni, Abhishek Deshmukh				   */
/***************************************************************************************************/
-----------------------------------------------------------------------------------------------------
Filenames:
-----------------------------------------------------------------------------------------------------
1. MainPrg.cpp
2. DoHello.cpp
3. ParseCmd.cpp
4. ParseFile.cpp
5. Connection.cpp
6. ProcessWrite.cpp
7. HandleRead.cpp
8. iniparser.cpp
9. strlib.cpp
10. dictionary.cpp
11. Store.cpp
12. Search.cpp
13. Delete.cpp
14. StatusFile.cpp
15. Get.cpp
16. Makefile
17. README
and Header files...

-------------------------------------------------------------------------------------------------------
How to run
-------------------------------------------------------------------------------------------------------
To compile the program, execute the following lines at the prompt:

prompt>make

It will create sv_node executable file.

Window:
prompt>sv_node [-reset] iniFileName

----------------------------------------------------------------------------------------------------------
Index Files Structure:
-----------------------------------------------------------------------------------------------------------
1. The index files are written with the following format :
   name_index :  FileNo|FileName
   sha1_index : FileNo|Sha1Value
   kwrd_index : FileNo|BitVectorValue

2. name_index and sha1_index files are sorted on filename and sha1 value respectively

3. Additionally following files are maintained for working of the node:
   lru_file : Stores LRU information
              Format :   FileNo|FileSize
   perm_file_id : Populated whenever a new file is stored at every node. Maintains file id's
	      Format :   FileNo|FileID 	
   one_time_pwd : Maintains all the one time passwords of files owned by node
	      Format :   FileNo|OneTimePassword
   nonce_file : Stores the nonce of all files in the node.
	      Format :   FileNo|Nonce

4. Note that index files are updated to the disk at the time of shutdown. So if a file is deleted while node
   is running, the index files won't be updated immediately. The changes will be reflected at the time
   of shutdown.

----------------------------------------------------------------------------------------------------------
Note:
-----------------------------------------------------------------------------------------------------------
1) Error messages are redirected to log files. e.g. No beacon node is available, Join failed or Performing 
   self restart because check failed etc.
   These kinds of error messages will be seen in the log file.

2) In the NTFY request message, while logging "0x" is appended in the log for display purposes.
   So request type 01 is represnted as 0x01 in the log file. While sending, 01 is sent over the network.

3) For parsing the INI file, iniparser provided on the project spec is used after modifying it as neeeded.
   http://merlot.usc.edu/cs551-f09/projects/iniparser/


------------------------------------------------------------------------------------------------------------
Description of Files:
------------------------------------------------------------------------------------------------------------
1. MainPrg.cpp

Following functions are defined in this file -

   Main()
	Start of Main Program

2. Connection.cpp

Following functions are defined in this file -

a. void printMessage(string prntStr) 
	Prints the message into log file.
b. struct CommonData* CommonData_Get()
	Gets the data from the queue structure.
c. struct CommonData* WriteQueue_Get(int pos)
	Gets the data from the individual node queue structure.
d. void WriteQueue_put(struct CommonData *tmp_data, int i) 
	Writes the data into the individual node's queue structure
e. void CommonData_put(uint8_t msg_type, char *UOID, uint8_t TTL, uint32_t nw_datalen, uint16_t ReceivingPort, char *Request, uint16_t DestPort)
	Writes the data into common queue structure
f. int SocketConnect(u_long address, u_short port)
	Establishes a connection with the other socket
g. void *ReadThreadFunc(void *acceptReturn)
	Reads the incoming data from the socket
h. void *WriteThreadFunc(void *acceptReturn) 
	Gets the data from the common queue structure
i. void *handleAcceptFunc(void *acceptRet) 
	Handles the message coming from the incoming socket connection
j. int SocketAccept(int port)
	Accepts the incoming socket connection
k. void CleanupAndExit()
	Cleans up all the structures, threads and variables
l. void indexFileWrite(string filename, vector<ComStruct> commonvector, int size)
	Writes out index files to the file system before shutdown
m. inline bool operator<(const ComStruct& a, const ComStruct& b)
	Overloads the less than operator used for sorting strings

3. DoHello.cpp

Following functions are defined in this file -

a. unsigned char* convertHexToChar(unsigned char *last4UOID) 
	Function is used to convert the hex string to character representation in log file
b. void reportLog(string type, string msg_type, int size, int ttl, char *msg_id, char *data, int port, bool headerFlag) 
	Function is used to perform the logging operations in all of the other functions
c. char *GetUOID (char *node_inst_id, char *obj_type, char *uoid_buf, int uoid_buf_sz)
	Function used to get the UOID.
d. char* GetHeader(char *node_inst_id, uint8_t Msg_type, uint8_t TTL, uint32_t DataLen)
	Function used to return the header . Used in all other messages. Calls GETUOID()
e. u_long ResolveAddress(const char *remoteHost) 
	Resolve hostname into a usable address 
f. void *mainAcceptThrFunc(void *iPort) 
	Function used to call SocketAccept() which accepts all connections requests for the node
g. void joinResponse(int acceptReturn, char *sUOID, uint32_t s_location, int port)
	Function used to send response to the join request
h. void writeHello(int cSocket, int port)
	Function used to sned response to HELLO request message
i. struct Header ReceiveHeader(int cSocket, bool chkCTBflag, int ctbPos)
	Function used to receive header from the other node...used in all read threads
j. void *connectThreadFunc(void *i) 
	Function creates outgoing connections and exhanges HELLO messages
k. void *DispatchHandle(void *null)
	Function copies data from main queue to all write threads data queue
l. void establishNodeForService(int iPort) 
	Function called from all 3 types of starts...creates other treads and checks for self restart
m. void HelloInit(string filename)
	Function creates other thraeds after reading init_neigbor_list file
n. static void sig_JoinHandler(int nsig)
	Function handles SIGUSR1 interrupt
o. void *joinBeacon(void *null)
	Function connects with beacn node and receives responses...
p. void JoinInit()
	Function calls joinBeacon Thread and sleeps for join timeout
q. void BeaconInit()
	Function establishes connections with other beacon nodes availble
r. char *getNodeInstanceId() 
	Function gets the instance id FOR the node
s. void resetNode() 
	Function resets the current node when reset option is specified

4. HandleRead.cpp

Following functions are defined in this file -

a. bool pushUOIDStruture(int myCTBPos,struct Header ARH1) 
	Inserts UOID of messages into a vector
b. void statusResponse(int acceptReturn, char *sUOID, int port)
	Generates status response and sends it to the node who requested
c. void HandleJoin_REQ(int socDesc,int myCTBPos,struct Header ARH1, char *readBuffer)
	Handles incoming join request. This function sends back the response and puts the request
	onto queue for flooding.
d. void HandleJoin_RSP(int socDesc,int myCTBPos,struct Header ARH1,char *readBuffer)
	Handles incoming join response. This function sends back the response and puts the request
	onto queue for relaying back to the node who sent join request.
f. void HandleStatus_REQ(int socDesc,int myCTBPos,struct Header ARH1,char *readBuffer)
	Handles incoming status request. This function sends back the response and puts the request
	onto queue for flooding.
g. void HandleStatus_RSP(int socDesc,int myCTBPos,struct Header ARH1,char *readBuffer)
	Handles incoming status response. This function processes the response by putting the node
	information into the node vector if the this node is the orinator of the request otherwise
	puts the request onto queue to relay back the response to the node who sent the request.
h. void SendCheckMessage()
	Generates the check message and puts it into common queue structure.
i. void HandleNotify_REQ(int socDesc,int myCTBPos,struct Header ARH1,char *readBuffer)
	Handles the notify request, if this node is non-beacon then it sends check message.
j. void HandleCheck_REQ(int socDesc,int myCTBPos,struct Header ARH1)
	Handles the check request by sending the check response(Only beacon node sends the check
	response, non-beacon node floods the request.
k. void HandleCheck_RSP(int socDesc,int myCTBPos,struct Header ARH1,char *readBuffer) 
	Handles the check response. If the originator of the request is this node then it processes the 
	response further if not then it relays the response to the requestor.
l. void HandleKalive_REQ(int socDesc,int myCTBPos,struct Header ARH1) 
	Handles the keepalive request.

5. ProcessWrite.cpp

Following functions are defined in this file -

a. char* GetfwdHeader(struct CommonData *ptr_getQ)
	Function gets the header to be sent along with outgoing messages.
b. void Process_REQfwd(int socDesc,struct CommonData *ptr_getQ,int myCTBPos)
	Function forwards requets to outgoing threads and performs logging.
c. void callStatus_Neigbors(string readBuffer)
	Function sends status request and waits for responses. Interruped by ctrl +c.
d. void callShutdown()
	Function handles shutdown request before sending out notify message.
e. void *CommandHandle(void *null)
	Function reads request from user and calls appropriate functions.
f. void *timerCount(void *null)
	Function sleeps for 1 second and generates signals for timerAction thread
g. void *timerAction(void *null)
	Function takes actions based on timing related issues like autoshutdown, check etc.
h. void InitRandom()
	This function generates pseudo random number.
i. void FileWrite(string filename, char* buffer, int destination)
	This function writes given buffer to any file in the home directory.
j. void DataFileWrite(string filename, char* buffer, int size, int type)
	Function writes data files to the home directory
k. void callStatus_Files(string readBuffer)
	Function to used to do status of files

6. Makefile
This file contains code to generate sv_node executable file. It also contains clean to clean up all object as well executables
files.
To clean type: prompt>make clean

7. Delete.cpp

a. void PerformDeletion(char *FileName, char *charSHA, char *charNonce, char *charPwd)
	Function deletes data from the index data structures.
b. void HandleDel_REQ(int socDesc, int myCTBPos, struct Header ARH1, char *readBuffer)
	Function used to read delete request from the network and parse the data
c. void callDelete(string readBuffer)
	Function used to parse commandline data and call perform delete

8. Get.cpp

a. void copyIntoWorkingDir(int localFileCount)
	Function copies the given file from node's home direcory to current working directory
b. void callGet(string readBuffer) 
	Function parses the commandline arguments and checks if the file exists in current node
c. void writeFileOnNetwork(string sDataFile, int acceptReturn, long file_datalen)
	Function sends the file data on the network
d. void getFileResponse(int acceptReturn, char *getUOID, char *fileID, int port)
	Function writes the response to get request
e. void HandleGet_REQ(int socDesc, int myCTBPos,struct Header ARH1, char *readBuffer)
	Function reads the GET request and calls get response, forwards the get to other nodes
f. string createTempFile(int socDesc, int myCTBPos, long file_datalen)
	Function creates a temporary intermediate file in tmp directory
g. void ReceiveGetResponse(int socDesc,int myCTBPos,struct Header ARH1,char *relayUOID, uint16_t relayPort)
	Function to handle responses to destination nodes
h. void ForwardGetResponse(int socDesc,int myCTBPos,struct Header ARH1,char *relayUOID, uint16_t relayPort)
	Function copies file between intermediate nodes
i. void HandleGet_RSP(int socDesc,int myCTBPos,struct Header ARH1)
	Function reads the GET response from the network and calls appropriate functions
j. void sendGetResponseMessage(char *msg_header, char *Request, int socDesc, uint32_t dataLen)
	Function forwards the get response to the next neighbor

9. Store.cpp

a. char *GetMD5 (char *input, char *md5buf, int md5buf_sz)
	Function used to get the MD5 value. 
b. char *GetSHA (char *input, char *shabuf, int shabuf_sz)
	Function used to get the SHA1 value. 
c. unsigned char* HexadecToChar(unsigned char *data, int size) 
	Function is used to convert the hex string to character representation
d. unsigned char* CharToHexadec(unsigned char *data, int size)
	Function is used to convert the character to hex string representation
e. void errorWhileReading(int myCTBPos, int socDesc)
	This function is used to send a check message if it fails to read data from the connection
f. void discardCompleteData(int socDesc,long readDataLen, int myCTBPos)
	This function is used to discard data present in the socket
g. void discardData(int socDesc,long readDataLen, int myCTBPos)
	This function is used to discard data present in the socket
h. unsigned char *loadBitVector(int fileCount, vector<string> KeyWVector)
	This function is used to generate bitvector
i. int loadAndStoreFiles(string filename) 
	This function is used to load index files vector
j. void sendStoreMessage(char *initBuffer, char *Request, int socDesc)
	This function is used to send store message over the network
k. MetaStruct ParseMetaData(char* metaName)
	This function is used to parse metafile
l. vector<string> pushKeywords(char *trimmedstr) 
	This function is used to push keywords into a vector
m. unsigned char* GenOTP(int localFileCount)
	This function is used to generate one time password
n. unsigned char* GenNonce(int localFileCount, unsigned char* charPass)
	This function is used to generate nonce
o. unsigned char* GenSHA1(int localFileCount, string filename, long file_datalen)
	This function is used to generate SHA1
p. string CreateMetaFile(int localFileCount, string extractFname, long file_datalen, unsigned char* charShaResult, unsigned char* charnonce, string trimmedstr, unsigned char* charBitVector)
	This function is used to create meta file
q. void deleteVectorFilesEntry(int localFileCount)
	This function is used to delete entries from the vectors
r. void updateLRUOrder(int fileCount)
	This function is used to update LRU vector
s. int addFileToLRU(MetaStruct rcdMeta)
	This function is used to insert file into LRU vector
t. void copyDataFromMetafile(int localFileCount, MetaStruct rcdMeta)
	This function is used to copy data from the meta file
u. void HandleStore_REQ(int socDesc,int myCTBPos,struct Header ARH1)
	This function is used to handles the store request by putting the request on to the common queue
w. void callStore_Files(string readBuffer) 
	This function puts the store request on the common queue i.e. initiates a store request

10. StatusFile.cpp

a. void writeStatusMetadata(string metaFile)
	This function writes the status response into output file.
b. void statusFileResponse(int acceptReturn, char *sUOID, int port)
	This function generated the status file response and writes response on to socket
c. void HandleStatusFiles_REQ(int socDesc, int myCTBPos, struct Header ARH1, char *readBuffer)
	This function handles status file request by flooding the request onto the network.

11. Search.cpp

a. void writeSearchResult(string metaName, unsigned char* fileID)
	Function is used to write the search result on screen.
b. bool FileName_Search(string querydata)
	This function sends this node's search response based on filename as well as floods the search request.
c. bool SHA1_Search(string querydata)
	This function sends this node's search response based on SHA1 as well as floods the search request.
d. bool findInBitVector(unsigned char* BitValue,vector<string> KeyWVector)
	This function finds the keyword in BitVector.
e. bool findInMetaFile(int fileCount, vector<string> KeyWVector)
	This function is used to find the keywords in the metafile.
f. bool Keyword_Search(string querydata)
	This function sends this node's search response based on keyword/s as well as floods the search request.
g. void callSearch(string readBuffer) 	
	This function calls respctive functions to execute search queries based on filename, SHA1 and keyword.
h. void searchFileResponse(int acceptReturn, char *sUOID, uint8_t sType, char *query, int port)
	This function generated the search response based on filename search.
i. void searchSHA1Response(int acceptReturn, char *sUOID, uint8_t sType, unsigned char *query, int port)
	This function generated the search response based on SHA1 search.
j. void searchKeyWResponse(int acceptReturn, char *sUOID, uint8_t sType, char *query, int port)
	This function generated the search response based on Keyword search.
k. void HandleSearch_REQ(int socDesc, int myCTBPos, struct Header ARH1, char* readBuffer)
	This function handles the incoming search request.
l. void HandleSearch_RSP(int socDesc, int myCTBPos, struct Header ARH1, char *readBuffer)
	This function handles the incoming search response.

------------------------------------------------------------------------------------------------------------------------------------------
References:
1. Lecture notes.
2. www.cppreference.com
3. www.cplusplus.com
4. https://computing.llnl.gov/tutorials/pthreads/
5. CSCI 499 Course projects for establishing connections
6. http://beej.us/guide/bgnet/
7. Code from Warmup 1 for commandline parsing
------------------------------------------------------------------------------------------------------------------------------------------

